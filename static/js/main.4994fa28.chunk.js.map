{"version":3,"sources":["Card.js","List.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Card","onDragStart","e","cardId","dataTransfer","setData","card","this","props","className","id","draggable","title","Component","List","state","cardTitle","showCardForm","onDragOver","preventDefault","onDrop","listKey","getData","dropItem","toggleCardForm","setState","updateCardTitle","target","value","handleAddCard","addNewCard","list","key","name","cards","map","TextField","multiline","rows","placeholder","InputProps","disableUnderline","onChange","Button","color","variant","size","onClick","fontSize","Board","lists","category","showListForm","listTitle","clonedCards","cardIndex","findIndex","el","String","slice","nextId","length","addNewList","listName","replace","toLowerCase","toggleListForm","updateListTitle","listsWithCards","reduce","Object","keys","r","d","forEach","push","values","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAGqBA,E,2MACnBC,YAAc,SAACC,EAAGC,GAChBD,EAAEE,aAAaC,QAAQ,SAAUF,I,wEAGzB,IAAD,OACCG,EAASC,KAAKC,MAAdF,KACR,OACE,yBAAKG,UAAU,OACbR,YAAa,SAACC,GAAD,OAAO,EAAKD,YAAYC,EAAGI,EAAKI,KAC7CC,WAAS,GAET,yBAAKF,UAAU,gBACZH,EAAKM,Y,GAbkBC,a,4BCEbC,E,2MACnBC,MAAQ,CACNC,UAAW,GACXC,cAAc,G,EAGhBC,WAAa,SAAChB,GACZA,EAAEiB,kB,EAGJC,OAAS,SAAClB,EAAGmB,GACX,IAAIlB,EAASD,EAAEE,aAAakB,QAAQ,UACpC,EAAKd,MAAMe,SAASF,EAASlB,I,EAG/BqB,eAAiB,WACf,EAAKC,SAAS,CAAER,cAAe,EAAKF,MAAME,gB,EAG5CS,gBAAkB,SAACxB,GACjB,EAAKuB,SAAS,CAAET,UAAWd,EAAEyB,OAAOC,S,EAGtCC,cAAgB,SAACR,EAASL,GACxB,EAAKR,MAAMsB,WAAWT,EAASL,GAC/B,EAAKS,SAAS,CAAER,cAAe,EAAKF,MAAME,aAAcD,UAAW,M,wEAG3D,IAAD,OACCe,EAASxB,KAAKC,MAAduB,KADD,EAE6BxB,KAAKQ,MAAjCC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,aACnB,OACE,yBAAKR,UAAU,OACbS,WAAY,SAAChB,GAAD,OAAO,EAAKgB,WAAWhB,IACnCkB,OAAQ,SAAClB,GAAQ,EAAKkB,OAAOlB,EAAG6B,EAAKC,OAErC,yBAAKvB,UAAU,kBACb,yBAAKA,UAAU,eAAesB,EAAKE,MACnC,yBAAKxB,UAAU,gBACb,yBAAKA,UAAU,SAEXsB,EAAKG,MAAMC,KAAI,SAAA7B,GAAI,OAEf,kBAAC,EAAD,CAAMA,KAAMA,EAAM0B,IAAK1B,EAAKI,UAMtC,yBAAKD,UAAU,eAEXQ,EACG,yBAAKR,UAAU,aACd,yBAAKA,UAAU,eACb,kBAAC2B,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,IACLV,MAAOZ,EACPuB,YAAY,8BACZC,WAAY,CAAEC,kBAAkB,GAChCC,SAAUnC,KAAKmB,mBAGnB,yBAAKjB,UAAU,gBACb,kBAACkC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,KAAK,QAAQC,QAAS,kBAAM,EAAKlB,cAAcE,EAAKC,IAAKhB,KAArG,YAGA,kBAAC2B,EAAA,EAAD,CAAQI,QAASxC,KAAKiB,eAAgBsB,KAAK,SACzC,kBAAC,IAAD,SAKJ,kBAACH,EAAA,EAAD,CAAQlC,UAAU,aAAasC,QAASxC,KAAKiB,gBAC3C,kBAAC,IAAD,CAAMf,UAAU,cAAcuC,SAAS,UACvC,yBAAKvC,UAAU,eAAf,0B,GA3EcI,a,QCEboC,E,2MACnBlC,MAAQ,CACNmC,MAAO,CACL,KAAQ,CAAElB,IAAK,OAAQC,KAAM,SAC7B,MAAS,CAAED,IAAK,QAASC,KAAM,SAC/B,KAAQ,CAAED,IAAK,OAAQC,KAAM,SAE/BC,MAAO,CACL,CAAExB,GAAI,EAAGE,MAAO,wBAAyBuC,SAAU,QACnD,CAAEzC,GAAI,EAAGE,MAAO,wBAAyBuC,SAAU,QACnD,CAAEzC,GAAI,EAAGE,MAAO,qBAAsBuC,SAAU,SAChD,CAAEzC,GAAI,EAAGE,MAAO,iDAAkDuC,SAAU,QAC5E,CAAEzC,GAAI,EAAGE,MAAO,0BAA2BuC,SAAU,SACrD,CAAEzC,GAAI,EAAGE,MAAO,sCAAuCuC,SAAU,SACjE,CAAEzC,GAAI,EAAGE,MAAO,sCAAuCuC,SAAU,SACjE,CAAEzC,GAAI,EAAGE,MAAO,wCAAyCuC,SAAU,SACnE,CAAEzC,GAAI,EAAGE,MAAO,2CAA4CuC,SAAU,UAExEC,cAAc,EACdC,UAAW,I,EAGb9B,SAAW,SAACF,EAASlB,GACnB,IAAMmD,EAAW,YAAO,EAAKvC,MAAMmB,OAC7BqB,EAAYD,EAAYE,WAAU,SAAAC,GAAE,OAAIC,OAAOD,EAAG/C,MAAQP,KAChE,EAAKsB,SAAS,CACZS,MAAM,GAAD,mBACAoB,EAAYK,MAAM,EAAGJ,IADrB,gBAEED,EAAYC,GAFd,CAE0BJ,SAAU9B,KAFpC,YAGAiC,EAAYK,MAAMJ,EAAY,Q,EAKvCzB,WAAa,SAACT,EAASL,GACrB,IAAM4C,EAAS,EAAK7C,MAAMmB,MAAM2B,OAAS,EACzC,EAAKpC,SAAS,CACZS,MAAM,GAAD,mBACA,EAAKnB,MAAMmB,OADX,CAEH,CAAExB,GAAIkD,EAAQhD,MAAOI,EAAWmC,SAAU9B,Q,EAKhDyC,WAAa,WACX,IAAMC,EAAW,EAAKhD,MAAMsC,UACtBhC,EAAU0C,EAASC,QAAQ,KAAM,IAAIC,cAC3C,EAAKxC,SAAS,CACZyB,MAAM,eACD,EAAKnC,MAAMmC,MADX,eAEF7B,EAAU,CAAEW,IAAKX,EAASY,KAAM8B,KAEnCX,cAAc,EACdC,UAAW,M,EAIfa,eAAiB,WACf,EAAKzC,SAAS,CAAE2B,cAAe,EAAKrC,MAAMqC,gB,EAG5Ce,gBAAkB,SAACjE,GACjB,EAAKuB,SAAS,CAAE4B,UAAWnD,EAAEyB,OAAOC,S,wEAG5B,IAAD,SAC2CrB,KAAKQ,MAA/CmC,EADD,EACCA,MAAOhB,EADR,EACQA,MAAOkB,EADf,EACeA,aAAcC,EAD7B,EAC6BA,UAEhCe,EAAiBC,iBAAOC,OAAOC,KAAKrB,IAAQ,SAACsB,EAAGC,GAMlD,OALAD,EAAEC,GAAK,CACLzC,IAAKyC,EACLxC,KAAMiB,EAAMuB,IAAMvB,EAAMuB,GAAGxC,KAC3BC,MAAO,IAEFsC,IACN,IAMH,OAJAtC,EAAMwC,SAAQ,SAACpE,GACb8D,EAAe9D,EAAK6C,UAAUjB,MAAMyC,KAAKrE,MAIzC,yBAAKG,UAAU,SAEX6D,OAAOM,OAAOR,GAAgBjC,KAAI,SAAAJ,GAAI,OAElC,kBAAC,EAAD,CAAMA,KAAMA,EAAMC,IAAKD,EAAKC,IAAKT,SAAU,EAAKA,SAAUO,WAAY,EAAKA,gBAIjF,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,kBAEX2C,EAEI,6BACE,yBAAK3C,UAAU,eACb,kBAAC2B,EAAA,EAAD,CACER,MAAOyB,EACPd,YAAY,sBACZC,WAAY,CAAEC,kBAAkB,GAChCC,SAAUnC,KAAK4D,mBAGnB,yBAAK1D,UAAU,gBACb,kBAACkC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,KAAK,QAAQC,QAASxC,KAAKuD,YAAvE,YAGA,kBAACnB,EAAA,EAAD,CAAQI,QAASxC,KAAK2D,eAAgBpB,KAAK,SACzC,kBAAC,IAAD,SAMP,kBAACH,EAAA,EAAD,CAAQlC,UAAU,WAAWsC,QAASxC,KAAK2D,gBAC1C,kBAAC,IAAD,CAAMzD,UAAU,YAAYuC,SAAS,UACrC,yBAAKvC,UAAU,aAAf,0B,GArHiBI,aCHdgE,E,iLAEjB,OACE,yBAAKpE,UAAU,OACb,kBAAC,EAAD,W,GAJyBI,aCQbiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4994fa28.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport default class Card extends Component {\n  onDragStart = (e, cardId) => {\n    e.dataTransfer.setData('cardId', cardId);\n  }\n\n  render() {\n    const { card } = this.props;\n    return (\n      <div className='card'\n        onDragStart={(e) => this.onDragStart(e, card.id)}\n        draggable\n      >\n        <div className='card-summary'>\n          {card.title}\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './Card';\nimport { Plus, Close } from 'mdi-material-ui';\nimport { Button, TextField } from '@material-ui/core';\nexport default class List extends Component {\n  state = {\n    cardTitle: '',\n    showCardForm: false,\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  onDrop = (e, listKey) => {\n    let cardId = e.dataTransfer.getData('cardId');\n    this.props.dropItem(listKey, cardId);\n  }\n\n  toggleCardForm = () => {\n    this.setState({ showCardForm: !this.state.showCardForm });\n  }\n\n  updateCardTitle = (e) => {\n    this.setState({ cardTitle: e.target.value })\n  }\n\n  handleAddCard = (listKey, cardTitle) => {\n    this.props.addNewCard(listKey, cardTitle);\n    this.setState({ showCardForm: !this.state.showCardForm, cardTitle: '' });\n  }\n\n  render() {\n    const { list } = this.props;\n    const { cardTitle, showCardForm } = this.state;\n    return (\n      <div className='list'\n        onDragOver={(e) => this.onDragOver(e)}\n        onDrop={(e) => { this.onDrop(e, list.key) }}\n      >\n        <div className='list-container'>\n          <div className='list-header'>{list.name}</div>\n          <div className='list-content'>\n            <div className='cards'>\n              {\n                list.cards.map(card =>\n                  (\n                    <Card card={card} key={card.id} />\n                  )\n                )\n              }\n            </div>\n          </div>\n          <div className='list-footer'>\n            {\n              showCardForm ?\n                (<div className='card-form'>\n                  <div className='title-field' >\n                    <TextField\n                      multiline\n                      rows=\"3\"\n                      value={cardTitle}\n                      placeholder='Enter a title for this card'\n                      InputProps={{ disableUnderline: true }}\n                      onChange={this.updateCardTitle}\n                    />\n                  </div>\n                  <div className='form-actions' >\n                    <Button color='primary' variant=\"contained\" size='small' onClick={() => this.handleAddCard(list.key, cardTitle)} >\n                      Add Card\n                    </Button>\n                    <Button onClick={this.toggleCardForm} size='small'>\n                      <Close />\n                    </Button>\n                  </div>\n                </div>) :\n                (\n                  <Button className='footer-btn' onClick={this.toggleCardForm}>\n                    <Plus className='footer-icon' fontSize='small' />\n                    <div className='footer-text'>Add a new card</div>\n                  </Button>\n                )\n            }\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport List from './List';\nimport { reduce } from 'lodash';\nimport { Plus, Close } from 'mdi-material-ui';\nimport { Button, TextField } from '@material-ui/core';\n\nexport default class Board extends Component {\n  state = {\n    lists: {\n      'todo': { key: 'todo', name: 'To Do' },\n      'doing': { key: 'doing', name: 'Doing' },\n      'done': { key: 'done', name: 'Done' },\n    },\n    cards: [\n      { id: 1, title: 'Create a Kanban board', category: 'todo' },\n      { id: 2, title: 'Create multiple lists', category: 'todo' },\n      { id: 3, title: 'Create a few cards', category: 'doing' },\n      { id: 4, title: 'Categories the cards into the respective lists', category: 'done' },\n      { id: 5, title: 'Implement Drag and Drop', category: 'doing' },\n      { id: 6, title: 'Let the user to create another list', category: 'doing' },\n      { id: 7, title: 'Let the user to create another card', category: 'doing' },\n      { id: 8, title: 'Handle the onclick event of each card', category: 'doing' },\n      { id: 9, title: 'Make a slightly more complicated card UI', category: 'doing' },\n    ],\n    showListForm: false,\n    listTitle: '',\n  }\n\n  dropItem = (listKey, cardId) => {\n    const clonedCards = [...this.state.cards];\n    const cardIndex = clonedCards.findIndex(el => String(el.id) === cardId);\n    this.setState({\n      cards: [\n        ...clonedCards.slice(0, cardIndex),\n        { ...clonedCards[cardIndex], category: listKey },\n        ...clonedCards.slice(cardIndex + 1)\n      ]\n    });\n  }\n\n  addNewCard = (listKey, cardTitle) => {\n    const nextId = this.state.cards.length + 1;\n    this.setState({\n      cards: [\n        ...this.state.cards,\n        { id: nextId, title: cardTitle, category: listKey },\n      ]\n    });\n  }\n\n  addNewList = () => {\n    const listName = this.state.listTitle;\n    const listKey = listName.replace(/ /g, '').toLowerCase();\n    this.setState({\n      lists: {\n        ...this.state.lists,\n        [listKey]: { key: listKey, name: listName },\n      },\n      showListForm: false,\n      listTitle: '',\n    });\n  }\n\n  toggleListForm = () => {\n    this.setState({ showListForm: !this.state.showListForm });\n  }\n\n  updateListTitle = (e) => {\n    this.setState({ listTitle: e.target.value })\n  }\n\n  render() {\n    const { lists, cards, showListForm, listTitle } = this.state;\n\n    let listsWithCards = reduce(Object.keys(lists), (r, d) => {\n      r[d] = {\n        key: d,\n        name: lists[d] && lists[d].name,\n        cards: []\n      };\n      return r;\n    }, {});\n\n    cards.forEach((card) => {\n      listsWithCards[card.category].cards.push(card);\n    });\n\n    return (\n      <div className='board'>\n        {\n          Object.values(listsWithCards).map(list =>\n            (\n              <List list={list} key={list.key} dropItem={this.dropItem} addNewCard={this.addNewCard} />\n            )\n          )\n        }\n        <div className='list-form'>\n          <div className='form-container'>\n            {\n              showListForm ?\n                (\n                  <div>\n                    <div className='title-field' >\n                      <TextField\n                        value={listTitle}\n                        placeholder='Enter list title...'\n                        InputProps={{ disableUnderline: true }}\n                        onChange={this.updateListTitle}\n                      />\n                    </div>\n                    <div className='form-actions' >\n                      <Button color='primary' variant=\"contained\" size='small' onClick={this.addNewList} >\n                        Add List\n                      </Button>\n                      <Button onClick={this.toggleListForm} size='small'>\n                        <Close />\n                      </Button>\n                    </div>\n                  </div>\n                )\n                :\n                (<Button className='form-btn' onClick={this.toggleListForm}>\n                  <Plus className='form-icon' fontSize='small' />\n                  <div className='form-text'>Add a new list</div>\n                </Button>)\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Board />\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}